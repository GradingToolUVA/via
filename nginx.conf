# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
daemon off;
pid /var/lib/hypothesis/nginx.pid;
error_log /dev/stderr;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

worker_rlimit_nofile 7192;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # The AWS load balancer talks to the server via http so use the scheme the
    # client provided in the originating request via AWS's X-Forwarded-Proto 
    # header. If it does not exist, fallback to $scheme.

    map $http_x_forwarded_proto $original_scheme {
        "" $scheme;
        default $http_x_forwarded_proto;
    }

    # We set fail_timeout=0 so that the upstream isn't marked as down if a single
    # request fails (e.g. if gunicorn kills a worker for taking too long to handle
    # a single request).
    upstream web { 
        server unix:/tmp/gunicorn-web.sock fail_timeout=0; 
    }

    resolver 8.8.8.8 ipv6=off;

    server {
        include /var/lib/hypothesis/nginx_envsubst.conf;
        listen 9083;
        merge_slashes off;

        location ~ /proxy/static/(?<proxied_uri>.*) {
            set $upstream $proxied_uri$is_args$args;
            proxy_ssl_server_name on;
            proxy_pass $upstream;
            proxy_redirect ~^(.*)$ $original_scheme://$http_host/id_/$1; 

            # Strip hypothesis cookies and authorization header.
            set $stripped_cookie $http_cookie;
      
            if ($stripped_cookie ~ "(.*)\s*auth=[^;]+;?(.*)") {
                set $stripped_cookie $1$2;
            }
            if ($stripped_cookie ~ "(.*)\s*session=[^;]+;?(.*)") {
                set $stripped_cookie $1$2;
            }
            proxy_set_header Cookie $stripped_cookie;
            proxy_set_header Authorization "";

            # Do not allow the third party server to set cookies.
            add_header 'Set-Cookie' ''; 
            add_header 'Access-Control-Allow-Origin' $access_control_allow_origin; 
        }

        location / {
            proxy_pass http://web;
            proxy_http_version 1.1;
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Server $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Request-Start "t=${msec}";
        }
    } 
}
